setwd(old.dir)
unlink('testdir', recursive = TRUE)
?par
swirl()
library(swirl)
swirl()
1:20
pi:10
15:1
?:
':'
?'?'
?`:`
seq(1,20)
seq(0,10, by =0.5)
seq(5,10, length=30)
seq(5, 10, length=30)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
?along
?along.with
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect <1
tf
num_vect >=6
my_char<-c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Eric")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("x", "y", "z"), sep = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
library("swirl")
rm(list=ls())
swirl()
5+7
x <- 5+7
x
y <- x-3
y
c(1.1,9,3.14)
z <- c(1.1,9,3.14)
?c
z
c(z,555,z)
z*22+100
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_dib
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z*2+1000
my_div
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path(mytest3.R)
file.path('mytest3.R')
file.path('folder1', 'folder2')
?dir.create
dir.create(file.path("testdir2"))
dir.create(file.path('testdir2',testdir2), recursive = TRUE)
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
unlink("testdir2")
unlink("testdir2", recursive = TRUE)
setwd(old.dir)
unlink('testdir')
unlink("testdir", recursive = TRUE)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10, by 0.5)
seq(0,10, by = 0.5)
my_seq <- seq(5,10, length = 30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2,), each = 10)
rep(c(0,1,2), each = 10)
num_vect <- 0.5, 55, -10, 6
num_vect <- C(0.5, 55, -10, 6)
num_vect <- c(0.5, 55, -10, 6)
tf <- numvect <1
tf <- num_vect <1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Eric")
my_name
paste(my_name, collapse = " ")
paste ( "Hello", "world!")
paste("Hello", "world!", sep = " ")
c("X", "Y", "Z")
paste(1:3, c("X", "Y", "Z"), sep = ""
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- C(44, NA, 5, NA)
x
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA,1000)
mydata <- sample(c(y,z),10)
mydata <- sample(c(y,z),100)
my_data <- sample(c(y,z),100)
is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x)&x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar =2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2)<- c("foo", "bar", "norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
library(swirl)
rm(list=ls())
swirl()
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my)
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, mmy_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data)
colnames(my_data) <- cnames
my_data
library(swirl)
rm(list=ls())
swirl()
True == True
if True == True
?true
??true
logical(true == true)
testthat: true==true
x = true
x <- TRUE
TRUE == TRUE
(FALSE == TRUE) == FALSE
(6 == 7)
6 == 7
6 <7
10 <= 10
5 != 7
5 != 7
5==7
!5==7
FALSE &FALSE
TRUE & C(TRUE,FALSE,FALSE)
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints
ints > 5
which(ints > 7)
any (ints <0)
all(ints>0)
Sys.Date()
rm(list=ls())
mean(c(2,4,5))
submit()
?submit
boring_function('My first function')
boring_function('My first function!')
boring_function
submit()
mean()
?mean
submit()
submit()
my_mean(c(4,5,10))
submit()
submit()
submit()
submit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor =11, num=5)
remainder(4, div=2)
args(remainder)
submit()
evaluate(c(1.4,3.6,7.9,8.8))
evaluate(sd(c(1.4,3.6,7.9,8.8)))
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){[1]},c(8,4,0))
evaluate(function(x){subset(1)},c(8,4,0))
evaluate(function(x){subset(x,1)},c(8,4,0))
evaluate(function(x){subset(x,1)},c(8,4,0))
evaluate(function(x){subset(x)},c(8,4,0))
?subset
evaluate(function(x), c(8,4,0))
evaluate(function(x){}, c(8,4,0))
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[3]}, c(8,4,0))
evaluate(function(x){x[3]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("hawk", "eye")
submit()
mad_libs("home","walking", "ark")
submit()
submit()
submit()
submit()
submit()
"%p%"("I", "love", "R!")
"%p%"("I", "love")
"I" %p% "love" %p% "R!"
head(flags)
dim(flags)
viewinfo(flags)
viewinfo(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
sapply(cls_list,lapply)
sapply(cls_list, as.character)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
?`$`
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors, mean)
flag_shapes <- [,19:23]
flag_shapes <- flags[,19:23]
lapply(flag_shapes)
lapply(flag_shapes, Range)
lapply(flag_shapes, range)
shape_mat <- sapple(flag_shapes, rnage)
shape_mat <- sapple(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
lapply(flags,unique)
unique_vals <- lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
?str
?summary
sapply(flags,unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags,class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$landmass, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls(plants)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(duration)
head(platns)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
library(swirl)
rm(list=ls())
swirl()
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:10)
sample(1:20,10)
LETTERS
sample(LETTERS)
flips <- sample(1:100,2, prob = c(0.3,0.7))
flips <- sample(100,2, prob = c(0.3,0.7))
flips <- sample(c(0,1),100, prob = c(0.3,0.7))
flips <- sample(c(0,1),100, replace = TRUE, prob = c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1, size=100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
>rnorm
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
rpois(5, 10)
replicate(100, rpois(5,10))
my_pois <- replicate(100, rpois(5,10))
my_pois
colmeans(my_pois)
cm<-colMeans(my_pois)
hist(cm)
di <- Sys.Date()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.date("1969-01-01")
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.Time
t1 <- Sys.Time()
t1 <- Sys.time()
t
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(d1)
months(t1)
quarters(t2)
t3 <- October 17, 1986 08:24
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B,%d,%Y,%H:%M")
t4 <- strptime(t3, "%B,%d,%Y,%H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime (Sys.time(), t1, units = 'days')
rm(list=ls())
log(-1)
log(-100)
printmessage <- function(x)
printmessage <- function(x) {}
printmessage <- function(x){}
printmessage <- function(x){ if(x>0)
Print("x is greater than zero")
else print ("x is less than or equal to zero")
invisible(x)}
printmessage(10)
printmessage
printmessage(x)
x <- 10
printmessage(x)
printmessage <- function(x){}
clear()
clear()
rm(list=ls())
getwd)
getwed
getwd
getwd()
setwd()
setwd(C:/Users/elapointe/Documents/GitHub/erilapo/ProgrammingAssignment2)
setwd("~/GitHub/erilapo/ProgrammingAssignment2")
ls(getwd())
getwd()
list(getwd())
ls(getwd())
load("~/GitHub/erilapo/ProgrammingAssignment2/cachematrix.R")
cachematrix.R
source('~/GitHub/erilapo/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix()
source('~/GitHub/erilapo/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(c(rbind(c(1,-1/4),C(-1/4,1))))
x <-c(rbind(c(1,-1/4),C(-1/4,1))
x <-c(rbind(c(1,-1/4),C(-1/4,1)))
x <- matrix(c(1,-1/4), C(-1/4,1))
x <- matrix(rbind(c(1,-1/4), C(-1/4,1))
x <- matrix(rbind(c(1,-1/4), C(-1/4,1)))
x <- matrix(1:4,ncol=2
x <- matrix(1:4,ncol=2))
x <- matrix(1:4,nrow=2)
makeCacheMatrix(x)
x
makeCacheMatrix(x=matrix(()))
makeCacheMatrix(x=matrix(())
makeCacheMatrix(x=matrix())
cacheSolve(x)
source('~/GitHub/erilapo/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/erilapo/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(x)
source('~/GitHub/erilapo/ProgrammingAssignment2/cachematrix.R')
cacheSolve(x)
source('~/GitHub/erilapo/ProgrammingAssignment2/cachematrix.R')
cacheSolve(x)
View(cacheSolve)
return(m)
m<<-NULL
m <- matrix(1:4,nrow=2)
x$setmatrix(m)
m
m <- 1:4
m
makeCacheMatrix(m)
cacheSolve(m)
x <- 1:4
makeCacheMatrix(x)
list(set=set, get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
source('~/GitHub/erilapo/ProgrammingAssignment2/cachematrix.R')
}
my_matrix <- makeCacheMatrix(matrix(1:4,2,2))
my_matrix
my_matrix$get()
my_matrix$getmatrix()
cacheSolve(my_matrix)
my_matrix$getmatrix()
my_matrix$set(matrix(C(2,2,1,4),2,2))
my_matrix$set(matrix(c(2,2,1,4),2,2))
my_matrix$get()
my_matrix$getmatrix()
cachesolve(my_matrix)
cacheSolve(my_matrix)
source('~/GitHub/erilapo/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/erilapo/ProgrammingAssignment2/cachematrix.R')
